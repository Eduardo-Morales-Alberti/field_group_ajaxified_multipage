<?php
/**
 * @file
 * Module's main file.
 */


/**
 * Implements hook_module_implements_alter
 * @param $implementations
 * @param $hook
 */
function field_group_ajaxified_multipage_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    if (isset($implementations['field_group_ajaxified_multipage'])) {
      $group = $implementations['field_group_ajaxified_multipage'];
      unset($implementations['field_group_ajaxified_multipage']);
      $implementations['field_group_ajaxified_multipage'] = $group;
    }
  }
}

/**
 * Implements hook_field_group_formatter_info().
 *
 * Define the information on formatters. The formatters are
 * separated by view mode type. We have "form" for all form elements
 * and "display" will be the real view modes (full, teaser, sticky, ...)
 *
 * structure:
 * @code
 * array(
 *   'form' => array(
 *     'fieldset' => array(
 *       // required, String with the name of the formatter type.
 *       'label' => t('Fieldset'),
 *       // optional, String description of the formatter type.
 *       'description' => t('This is field group that ...'),
 *       // required, Array of available formatter options.
 *       'format_types' => array('open', 'collapsible', 'collapsed'),
 *       // required, String with default value of the style.
'default_formatter' => 'collapsible',
 *       // optional, Array with key => default_value pairs.
 *       'instance_settings' => array('key' => 'value'),
 *     ),
 *   ),
 *   'display' => array(
 *     'fieldset' => array(
 *       // required, String with the name of the formatter type.
 *       'label' => t('Fieldset'),
 *       // optional, String description of the formatter type.
 *       'description' => t('This is field group that ...'),
 *       // required, Array of available formatter options.
 *       'format_types' => array('open', 'collapsible', 'collapsed'),
 *       // required, String with default value of the style.
'default_formatter' => 'collapsible',
 *       // optional, Array with key => default_value pairs.
 *       'instance_settings' => array('key' => 'value'),
 *     ),
 *   ),
 * ),
 * @endcode
 *
 * @return $formatters
 *   A collection of available formatting html controls for form
 *   and display overview type.
 *
 * @see field_group_field_group_formatter_info()
 */
function field_group_ajaxified_multipage_field_group_formatter_info() {
  return array(
    'form' => array(
      'multipage-group' => array(
        'instance_settings' => array('ajaxify' => 0),
      ),
    ),
  );
}


/**
 * Implements hook_field_group_format_settings().
 *
 * Defines configuration widget for the settings on a field group
 * formatter. Eache formatter can have different elements and storage.
 *
 * @params Object $group The group object.
 * @return Array $form The form element for the format settings.
 */
function field_group_ajaxified_multipage_field_group_format_settings($group) {
  if ($group->format_type == 'multipage-group') {
    $field_group_types = field_group_formatter_info();
    $mode = $group->mode == 'form' ? 'form' : 'display';
    $formatter = $field_group_types[$mode][$group->format_type];
    if (!isset($group->format_settings['instance_settings']['ajaxify'])) {
      $group->format_settings['instance_settings']['ajaxify'] = FALSE;
    }

    $form = array(
      'instance_settings' => array(
        '#tree' => TRUE,
        '#weight' => 20,
      ),
    );

    $form['instance_settings']['ajaxify'] = array(
      '#title' => t('Ajaxify'),
      '#type' => 'select',
      '#default_value' => isset($group->format_settings['instance_settings']['ajaxify']) ? $group->format_settings['instance_settings']['ajaxify'] : $formatter['instance_settings']['ajaxify'],
      '#weight' => 20,
      '#options' => array(0 => t('No'), 1 => t('Yes')),
      //'#title_display' => true,
      '#description' => t('If enabled navigation to next/prev pages will be done using ajax instead of simple javascript')
    );
    return $form;
  }
}


/**
 * Implements hook_form_alter
 * @param $form
 * @param $form_state
 * @param $form_id
 * @param bool $no_js_use
 */
function field_group_ajaxified_multipage_form_alter(&$form, &$form_state, $form_id, $no_js_use = FALSE) {
  #--(Begin)--> Check form array to see if it has multipage group
  $is_multi_page = FALSE;
  $page_group = array();
  if (isset($form['#groups_custom'])) {
    $form['#groups'] = $form['#groups_custom'];
  }
  if (isset($form['#groups'])) {
    $groups = array();
    $page_group = NULL;
    foreach ($form['#groups'] as $key => $_group) {
      if (is_object($_group)) {
        $_group = array(
          'format_type' => $_group->format_type,
          'label' => $_group->label,
          'format_settings' => $_group->format_settings,
          'children' => $_group->children
        );
      }
      if (is_array($_group)) {
        if ($_group['format_type'] == 'multipage-group' && $_group['format_settings']['instance_settings']['ajaxify'] && empty($page_group)) {
          $is_multi_page = TRUE;
          $page_group = $_group;
        }
        $groups[$key] = $_group;
      }
    }
    $form_state['field_group_ajaxified_multipage_enabled'] = $is_multi_page;
    $form_state['field_group_ajaxified_multipage_group'] = $page_group;
  }
  #--(End)--> Check form array to see if it has multipage group

  #--(Begin)--> Ajaxify multipage group
  if ($is_multi_page) {
    $wrapper_id = 'form-ajax-wrapper';
    if (isset($form['#id'])) {
      $wrapper_id = $form['#id'] . '-' . $wrapper_id;
    }
    $form['#prefix'] = '<div id="' . $wrapper_id . '">';
    $form['#suffix'] = '</div>';
    $form['#tree'] = TRUE;

    // $form_state['storage'] has no specific drupal meaning, but it is
    // traditional to keep variables for multistep forms there.
    $step = empty($form_state['storage']['field_group_ajaxified_multipage_step']) ? 1 : $form_state['storage']['field_group_ajaxified_multipage_step'];
    $form_state['storage']['field_group_ajaxified_multipage_step'] = $step;

    #--(Begin)--> Convert page group formats to fieldset
    $n = 0;
    foreach ($groups as $group_name => $group) {
      if (in_array($group_name, $page_group['children'])) {
        $n++;
        $group['format_type'] = 'fieldset';
        if (isset($form['#groups'])) {
          $form['#groups'][$group_name]->format_type = $group['format_type'];
        }
        if ($n != $step) {
          foreach ($group['children'] as $child_name) {
            unset($form[$child_name]);
          }
        }
      }
    }
    #--(End)--> Convert page group formats to fieldset

    #--(Begin)--> Remove non grouped fields in all other steps except the first one
    if (($step > 1 && !$page_group['format_settings']['instance_settings']['move_additional']) || ($step < count($page_group['children']) && $page_group['format_settings']['instance_settings']['move_additional']) ) {
      foreach ($form as $form_item => $form_item_name) {
        if (is_array($form_item_name)) {
          if (isset($form_item_name['#group'])) {
            if ($form_item_name['#group'] == 'additional_settings') {
              unset($form[$form_item]);
            }
          }
        }
      }
    }
    #--(End)--> Remove non grouped fields in all other steps except the first one
    $step_label = $groups[$page_group['children'][$step-1]]['label'];
    #--(Begin)--> Add header
    // Create a page title from the label.
    $page_header = isset($page_group['format_settings']['instance_settings']['page_header']) ? $page_group['format_settings']['instance_settings']['page_header'] : 3;
    switch ($page_header) {
      case 1:
        $title = $step_label;
        break;
      case 2:
        $title = t('Step %count of %total', array('%count' => $step, '%total' => count($page_group['children'])));
        break;
      case 3:
        $title = t('Step %count of %total !label', array('%count' => $step, '%total' => count($page_group['children']), '!label' => $step_label));
        break;
      case 0:
      default:
        $title = '';
        break;
    }
    $output = '<div' . drupal_attributes($form['#attributes']) . '>';
    if (!empty($step_label)) {
      // Always wrap fieldset legends in a SPAN for CSS positioning.
      $output .= '<h2 class="multipage-pane-title"><span>' . $title . '</span></h2>';
    }

    $output .= '</div>';
    $form['paging_header'] = array(
      '#type' => 'item',
      '#markup' => $output,
      '#weight' => -1
    );
    #--(End)--> Add header

    #--(Begin)--> Add footer
    $page_counter_format = isset($page_group['format_settings']['instance_settings']['page_counter']) ? $page_group['format_settings']['instance_settings']['page_counter'] : 1;
    $output = '<div class="fieldset-wrapper multipage-pane-wrapper">';
    if ($page_counter_format == 1) {
      $output .= t('<span class="multipage-counter_ajax">%count / %total</span>', array('%count' => $step, '%total' => count($page_group['children'])));
    }
    elseif ($page_counter_format == 2) {
      $output .=  t('<span class="multipage-counter_ajax">%count</span>', array('%count' => $step));
    }
    $output .= '</div>';
    $form['paging_footer'] = array(
      '#type' => 'markup',
      '#markup' => $output,
      //'#weight' => 100
    );
    #--(End)--> Add footer

    #--(Begin)--> Add navigation buttons
    if ($step < count($page_group['children'])) {
      $form['actions']['next'] = array(
        '#type' => 'submit',
        '#value' => t('Next step'),
        '#submit' => array('_field_group_ajaxified_multipage_form_submit'),
        '#ajax' => array(
          'wrapper' => $wrapper_id,
          'callback' => '_field_group_ajaxified_multipage_form_callback',
        ),
      );
    }
    if ($step > 1) {
      $form['actions']['prev'] = array(
        '#type' => 'submit',
        '#value' => t("Previous step"),
        // Since all info will be discarded, don't validate on 'prev'.
        '#limit_validation_errors' => array(),
        // #submit is required to use #limit_validation_errors
        '#submit' => array('_field_group_ajaxified_multipage_form_submit'),
        '#ajax' => array(
          'wrapper' => $wrapper_id,
          'callback' => '_field_group_ajaxified_multipage_form_callback',
        ),
      );
    }
    #--(End)--> Add navigation buttons

    #--(Begin)--> Display submit button on the last step
    $form['actions']['submit']['#submit'] = array_merge(array('_field_group_ajaxified_multipage_form_submit') , $form['actions']['submit']['#submit']);
    if ($step != count($page_group['children']) && $page_group['format_settings']['instance_settings']['move_button']) {
      unset($form['actions']['submit']);
      unset($form['actions']['preview']);
    }
    #--(End)--> Display submit button on the last step

    // This simply allows us to demonstrate no-javascript use without
    // actually turning off javascript in the browser. Removing the #ajax
    // element turns off AJAX behaviors on that element and as a result
    // ajax.js doesn't get loaded.
    // For demonstration only! You don't need this.
    if ($no_js_use) {
      // Remove the #ajax from the above, so ajax.js won't be loaded.
      // For demonstration only.
      unset($form['next']['#ajax']);
      unset($form['prev']['#ajax']);
    }
  }
  #--(Begin)-->  Ajaxify multipage group
}

/**
 * Ajax callback for ajaxified form
 * @param $form
 * @param $form_state
 * @return mixed
 */
function _field_group_ajaxified_multipage_form_callback($form, $form_state) {
  return $form;
}


/**
 * Submit function for ajaxified form.
 *
 * In AJAX this is only submitted when the final submit button is clicked,
 * but in the non-javascript situation, it is submitted with every
 * button click.
 */
function _field_group_ajaxified_multipage_form_submit($form, &$form_state) {

  // Save away the current information.
  $current_step = 'step' . $form_state['storage']['field_group_ajaxified_multipage_step'];
  if (!empty($form_state['values'])) {
    $form_state['storage']['values'][$current_step] = $form_state['values'];
    $form_state['storage']['input'][$current_step] = $form_state['input'];
  }

  // Increment or decrement the step as needed. Recover values if they exist.
  if ($form_state['triggering_element']['#value'] == t('Next step')) {
    $form_state['storage']['field_group_ajaxified_multipage_step']++;
    // If values have already been entered for this step, recover them from
    // $form_state['storage'] to pre-populate them.
    $step_name = 'step' . $form_state['storage']['field_group_ajaxified_multipage_step'];
    if (!empty($form_state['storage']['values'][$step_name])) {
      $form_state['values'] = $form_state['storage']['values'][$step_name];
      $form_state['input'] = $form_state['storage']['input'][$step_name];
    }
  }
  if ($form_state['triggering_element']['#value'] == t('Previous step')) {
    $form_state['storage']['field_group_ajaxified_multipage_step']--;
    // Recover our values from $form_state['storage'] to pre-populate them.
    $step_name = 'step' . $form_state['storage']['field_group_ajaxified_multipage_step'];
    $form_state['values'] = $form_state['storage']['values'][$step_name];
    $form_state['input'] = $form_state['storage']['input'][$step_name];
  }

  // If they're done, submit.
  if ($form_state['triggering_element']['#value'] == $form['actions']['submit']['#value']) {
    $value_message = t('Your information has been submitted:') . ' ';
    foreach ($form_state['storage']['values'] as $step => $values) {
      $form_state['values'] = array_merge($form_state['values'], $values);
      //$value_message .= "$step: ";
      //foreach ($values as $key => $value) {
      //$value_message .= "$key=$value, ";
      //}
    }
    //drupal_set_message($value_message);
    $form_state['rebuild'] = FALSE;
    return;
  }

  // Otherwise, we still have work to do.
  $form_state['rebuild'] = TRUE;
}